#!/usr/bin/env python3
"""
üéµ Custom Sound Generator
G√©n√©rateur de sons utilisant les presets cr√©√©s avec le Sound Designer
"""

import json
import os
import random
import numpy as np
import wave
from typing import Dict, List, Any, Optional
import logging

from .simple_midi_audio_generator import SimpleSoundGenerator, SimpleMidiExtractor
from .base_audio_generator import IAudioGenerator
from ..core.data_pipeline import TrendData, AudioEvent

logger = logging.getLogger(__name__)

class CustomSoundGenerator:
    """G√©n√©rateur de sons utilisant les configurations personnalis√©es"""
    
    def __init__(self, sample_rate: int = 44100):
        self.sample_rate = sample_rate
        self.sound_generator = SimpleSoundGenerator(sample_rate=sample_rate)
        self.custom_configs = []
        self.load_custom_sounds()
        
    def load_custom_sounds(self):
        """Charge les sons personnalis√©s depuis le fichier JSON"""
        config_file = "sound_presets/custom_sounds.json"
        
        if os.path.exists(config_file):
            try:
                with open(config_file, "r", encoding="utf-8") as f:
                    self.custom_configs = json.load(f)
                logger.info(f"‚úÖ {len(self.custom_configs)} sons personnalis√©s charg√©s")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors du chargement des sons personnalis√©s: {e}")
                self.custom_configs = []
        else:
            logger.warning("‚ö†Ô∏è Aucun fichier de sons personnalis√©s trouv√©, utilisation des sons par d√©faut")
            self.custom_configs = self._get_default_configs()
            
    def _get_default_configs(self) -> List[Dict[str, Any]]:
        """Retourne des configurations par d√©faut si aucun preset n'est trouv√©"""
        return [
            {
                "name": "Bounce Satisfaisant",
                "type": "satisfying_bounce",
                "frequency_range": [200, 600],
                "duration": 0.4,
                "volume": 0.6,
                "envelope": {"attack_ms": 3.0, "decay_ms": 40.0, "sustain_level": 0.8, "release_ms": 80.0}
            },
            {
                "name": "Pop ASMR",
                "type": "asmr_pop",
                "frequency_range": [300, 800],
                "duration": 0.3,
                "volume": 0.5,
                "envelope": {"attack_ms": 1.0, "decay_ms": 20.0, "sustain_level": 0.7, "release_ms": 60.0}
            },
            {
                "name": "Carillon Doux",
                "type": "soft_chime",
                "frequency_range": [400, 1200],
                "duration": 0.8,
                "volume": 0.4,
                "envelope": {"attack_ms": 5.0, "decay_ms": 80.0, "sustain_level": 0.6, "release_ms": 200.0}
            },
            {
                "name": "Goutte d'Eau",
                "type": "water_drop",
                "frequency_range": [250, 500],
                "duration": 0.6,
                "volume": 0.5,
                "envelope": {"attack_ms": 2.0, "decay_ms": 30.0, "sustain_level": 0.9, "release_ms": 100.0}
            },
            {
                "name": "Corde Pinc√©e",
                "type": "gentle_pluck",
                "frequency_range": [150, 400],
                "duration": 0.7,
                "volume": 0.6,
                "envelope": {"attack_ms": 1.0, "decay_ms": 50.0, "sustain_level": 0.5, "release_ms": 150.0}
            },
            {
                "name": "Cristal Ting",
                "type": "crystal_ting",
                "frequency_range": [800, 2000],
                "duration": 0.5,
                "volume": 0.4,
                "envelope": {"attack_ms": 0.5, "decay_ms": 25.0, "sustain_level": 0.8, "release_ms": 120.0}
            }
        ]
        
    def get_random_config(self) -> Dict[str, Any]:
        """Retourne une configuration al√©atoire"""
        if not self.custom_configs:
            self.load_custom_sounds()
            
        if self.custom_configs:
            return random.choice(self.custom_configs)
        else:
            return self._get_default_configs()[0]
            
    def get_config_by_name(self, name: str) -> Optional[Dict[str, Any]]:
        """Retourne une configuration par nom"""
        for config in self.custom_configs:
            if config["name"] == name:
                return config
        return None
            
    def generate_sound_from_config(self, config: Dict[str, Any], frequency: Optional[float] = None) -> np.ndarray:
        """G√©n√®re un son √† partir d'une configuration"""
        
        # Utilise une fr√©quence sp√©cifique ou en g√©n√®re une al√©atoire dans la plage
        if frequency is None:
            freq_min, freq_max = config["frequency_range"]
            frequency = random.uniform(freq_min, freq_max)
        
        sound_type = config["type"]
        duration = config["duration"]
        volume = config["volume"]
        
        # G√©n√®re le son selon le type
        if sound_type == "satisfying_bounce":
            return self.sound_generator.satisfying_bounce(frequency, duration, volume)
        elif sound_type == "asmr_pop":
            return self.sound_generator.asmr_pop(frequency, duration, volume)
        elif sound_type == "soft_chime":
            return self.sound_generator.soft_chime(frequency, duration, volume)
        elif sound_type == "water_drop":
            return self.sound_generator.water_drop(frequency, duration, volume)
        elif sound_type == "gentle_pluck":
            return self.sound_generator.gentle_pluck(frequency, duration, volume)
        elif sound_type == "crystal_ting":
            return self.sound_generator.crystal_ting(frequency, duration, volume)
        else:
            # Fallback vers satisfying_bounce
            return self.sound_generator.satisfying_bounce(frequency, duration, volume)
            
    def generate_random_sound(self, frequency: Optional[float] = None) -> np.ndarray:
        """G√©n√®re un son al√©atoire √† partir des presets"""
        config = self.get_random_config()
        return self.generate_sound_from_config(config, frequency)
        
    def generate_sound_by_name(self, name: str, frequency: Optional[float] = None) -> Optional[np.ndarray]:
        """G√©n√®re un son en utilisant un preset sp√©cifique par nom"""
        config = self.get_config_by_name(name)
        if config:
            return self.generate_sound_from_config(config, frequency)
        
        logger.warning(f"‚ö†Ô∏è Preset '{name}' non trouv√©, utilisation d'un son al√©atoire")
        return self.generate_random_sound(frequency)
        
    def list_available_sounds(self) -> List[str]:
        """Retourne la liste des noms de sons disponibles"""
        return [config["name"] for config in self.custom_configs]
        
    def get_sound_info(self, name: str) -> Optional[Dict[str, Any]]:
        """Retourne les informations d'un son sp√©cifique"""
        return self.get_config_by_name(name)

# Classe principale compatible avec l'interface IAudioGenerator
class CustomMidiAudioGenerator(IAudioGenerator):
    """G√©n√©rateur audio personnalis√© bas√© sur SimpleMidiAudioGenerator avec les presets du Sound Designer"""
    
    def __init__(self, sample_rate: int = 44100):
        self.sample_rate = sample_rate
        self.output_path = "output/custom_audio.wav"
        self.duration = 30.0
        
        # Composants - similaire √† SimpleMidiAudioGenerator
        self.midi_extractor = SimpleMidiExtractor()
        self.custom_sound_gen = CustomSoundGenerator(sample_rate)
        
        # √âtat
        self.melody_notes = []
        self.events = []
        self.audio_data = None
        self.trend_data = None
        
        # Configuration avec les presets personnalis√©s
        self.available_presets = self.custom_sound_gen.list_available_sounds()
        self.current_preset = None
        self.volume = 0.5  # Volume plus doux pour les sons ASMR
        self.max_simultaneous_notes = 3  # Moins de superposition pour plus de clart√©
        self.auto_volume_adjust = True    # Auto adjust volume
        
        logger.info(f"üéµ Custom MIDI Audio Generator initialis√© avec {len(self.available_presets)} presets")
        
    def configure(self, config: Dict[str, Any]) -> bool:
        """Configuration du g√©n√©rateur personnalis√©"""
        try:
            # Preset sp√©cifique ou al√©atoire
            preset_name = config.get("preset_name")
            if preset_name and preset_name in self.available_presets:
                self.current_preset = preset_name
            else:
                self.current_preset = random.choice(self.available_presets) if self.available_presets else None
            
            self.volume = config.get("volume", 0.6)
            self.max_simultaneous_notes = config.get("max_simultaneous_notes", 3)
            self.auto_volume_adjust = config.get("auto_volume_adjust", True)
            
            logger.info(f"Configuration: preset={self.current_preset}, volume={self.volume}")
            return True
            
        except Exception as e:
            logger.error(f"Erreur de configuration: {e}")
            return False
    
    def set_output_path(self, path: str) -> None:
        """D√©finit le chemin de sortie pour l'audio"""
        self.output_path = path
        os.makedirs(os.path.dirname(path), exist_ok=True)
    
    def set_duration(self, duration: float) -> None:
        """D√©finit la dur√©e de l'audio"""
        self.duration = duration
    
    def select_music(self, musics: list):
        """S√©lection al√©atoire de musique - identique √† SimpleMidiAudioGenerator"""
        if not musics:
            return None
        index = random.randint(0, len(musics) - 1)
        return musics[index]

    def apply_trend_data(self, trend_data: TrendData) -> None:
        """Applique les donn√©es de tendance - identique √† SimpleMidiAudioGenerator"""
        self.trend_data = trend_data
        
        midi_files = []
        # Recherche de fichiers MIDI
        if trend_data and trend_data.popular_music:
            for music in trend_data.popular_music:
                if 'file_path' in music:
                    file_path = music['file_path']
                    if file_path.endswith(('.mid', '.midi')):
                        midi_files.append(file_path)
        
        # S√©lectionne la musique
        if midi_files:
            music_path = self.select_music(midi_files)
            if music_path:  # V√©rification que music_path n'est pas None
                self.melody_notes = self.midi_extractor.extract_notes(music_path)
                logger.info(f"M√©lodie charg√©e depuis {music_path}")
            else:
                # Fichier MIDI non trouv√©, utilise la m√©lodie par d√©faut
                self.melody_notes = self.midi_extractor.get_default_melody()
                logger.warning("M√©lodie par d√©faut utilis√©e - s√©lection musicale √©chou√©e")
        else:
            # Fichier MIDI non trouv√©, utilise la m√©lodie par d√©faut
            self.melody_notes = self.midi_extractor.get_default_melody()
            logger.warning("M√©lodie par d√©faut utilis√©e - aucun fichier MIDI trouv√©")
    
    def add_events(self, events: List[AudioEvent]) -> None:
        """Ajoute des √©v√©nements audio √† la timeline"""
        self.events.extend(events)
        logger.debug(f"Ajout de {len(events)} √©v√©nements")
    
    def generate(self) -> Optional[str]:
        """G√©n√®re la piste audio avec les sons personnalis√©s - structure identique √† SimpleMidiAudioGenerator"""
        try:
            logger.info("üéµ D√©marrage de la g√©n√©ration audio personnalis√©e...")
            
            # Buffer audio
            total_samples = int(self.sample_rate * self.duration)
            self.audio_data = np.zeros(total_samples, dtype=np.float32)
            
            # S√©lectionne un preset s'il n'y en a pas d√©j√† un
            if not self.current_preset and self.available_presets:
                self.current_preset = random.choice(self.available_presets)
            
            logger.info(f"Preset utilis√©: {self.current_preset}")

            # Traite les √©v√©nements
            self._process_events()
            
            # Normalise et sauvegarde
            self._normalize_and_save()
            
            logger.info(f"Audio g√©n√©r√©: {self.output_path}")
            return self.output_path
            
        except Exception as e:
            logger.error(f"Erreur lors de la g√©n√©ration: {e}")
            return None
    
    def _process_events(self):
        """Traite les √©v√©nements et joue les notes - identique √† SimpleMidiAudioGenerator"""
        if not self.melody_notes:
            logger.warning("M√©lodie indisponible")
            return

        if self.audio_data is None or len(self.audio_data) == 0:
            logger.warning("Buffer audio indisponible")
            return

        note_index = 0

        for event in self.events:
            try:
                # Joue une note sur tous les √©v√©nements int√©ressants
                if event.event_type in ["collision", "particle_bounce", "circle_activation", "countdown_beep"]:

                    # Passe √† la note suivante
                    frequency = self.melody_notes[note_index % len(self.melody_notes)]
                    note_index += 1
                    
                    # Calcul intelligent du volume
                    start_sample = int(event.time * self.sample_rate)
                    
                    # G√©n√®re le son pour cette note
                    sound = self._generate_sound(frequency, event)
                    
                    # G√®re les sons superpos√©s
                    end_sample = min(start_sample + len(sound), len(self.audio_data))

                    if start_sample < len(self.audio_data):
                        length = end_sample - start_sample
                        
                        # Compte les notes actives simultan√©ment
                        if self.auto_volume_adjust:
                            region_activity = np.mean(np.abs(self.audio_data[start_sample:end_sample]))
                            volume_reduction = 1.0 / (1.0 + region_activity * 2)  # R√©duction progressive
                            sound = sound * volume_reduction
                        
                        # Superposition naturelle
                        self.audio_data[start_sample:end_sample] += sound[:length]

            except Exception as e:
                logger.warning(f"Erreur √©v√©nement: {e}")

    def _generate_sound(self, frequency: float, event: AudioEvent) -> np.ndarray:
        """G√©n√®re un son personnalis√© organique et ASMR"""
        
        # Volume de base adaptatif selon l'√©v√©nement
        base_volume = self.volume
        
        if event.params:
            intensity = event.params.get("intensity", 1.0)
            base_volume *= intensity
            base_volume *= event.params.get("volume", 1.0)
        
        # Limitation du volume pour √©viter la saturation
        base_volume = min(base_volume, 0.8)
        
        # Variation de fr√©quence organique pour plus de naturel
        frequency_variation = random.uniform(0.95, 1.05)
        organic_frequency = frequency * frequency_variation
        
        # G√©n√®re le son selon le preset s√©lectionn√© ou al√©atoire
        if self.current_preset:
            config = self.custom_sound_gen.get_config_by_name(self.current_preset)
            if config:
                # Cr√©e une copie pour ne pas modifier l'original
                config_copy = config.copy()
                config_copy["volume"] = base_volume
                sound = self.custom_sound_gen.generate_sound_from_config(config_copy, organic_frequency)
                return sound
        
        # Fallback : g√©n√®re un son al√©atoire avec fr√©quence organique
        return self.custom_sound_gen.generate_random_sound(organic_frequency)
    
    def _normalize_and_save(self):
        """Normalise et sauvegarde la sortie audio - identique √† SimpleMidiAudioGenerator"""
        
        if self.audio_data is None:
            logger.error("Aucune donn√©e audio √† normaliser")
            return
        
        # √âtape 1: Normalisation
        max_val = np.max(np.abs(self.audio_data))

        if max_val > 1.0:
            # Compression douce pour √©viter l'√©cr√™tage
            compression_ratio = 0.8 / max_val
            self.audio_data = self.audio_data * compression_ratio
            logger.info(f"Compression appliqu√©e: {compression_ratio:.3f}")
        else:
            # Amplification douce si le signal est trop faible
            if 0 < max_val < 0.3:
                amplification = 0.7 / max_val
                self.audio_data = self.audio_data * amplification
                logger.info(f"Amplification appliqu√©e: {amplification:.3f}")
        
        # √âtape 2: Applique un fade in/out doux (50 ms)
        fade_samples = int(0.05 * self.sample_rate)  # 50 ms de dur√©e de fade
        if len(self.audio_data) > fade_samples * 2:
            # Fade-in doux (sinuso√Ødal)
            fade_in = np.sin(np.linspace(0, np.pi / 2, fade_samples)) ** 2
            self.audio_data[:fade_samples] *= fade_in

            # Fade-out doux (bas√© sur cosinus)
            fade_out = np.cos(np.linspace(0, np.pi / 2, fade_samples)) ** 2
            self.audio_data[-fade_samples:] *= fade_out

        # √âtape 3: Exporte en fichier WAV
        self._save_to_wav()

    def _save_to_wav(self):
        """Sauvegarde le buffer audio dans un fichier WAV"""
        
        if self.audio_data is None:
            logger.error("Aucune donn√©e audio √† sauvegarder")
            return
        
        try:
            # Convertit float32 en PCM 16-bit
            audio_int16 = (self.audio_data * 32767).astype(np.int16)

            with wave.open(self.output_path, 'w') as wav_file:
                wav_file.setnchannels(1)         # Mono
                wav_file.setsampwidth(2)         # √©chantillons 16-bit
                wav_file.setframerate(self.sample_rate)
                wav_file.writeframes(audio_int16.tobytes())
            
            logger.info(f"Fichier WAV sauvegard√©: {self.output_path}")
        
        except Exception as e:
            logger.error(f"Erreur lors de la sauvegarde WAV: {e}")
            raise 